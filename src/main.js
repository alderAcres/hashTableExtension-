/**
* HashTable costructor
*
* construct a new hash table
*
* - You may modify this constructor as you need to achieve the challenges below.
*/

function HashTable() {
  this.SIZE = 16;
  this.length = 0;
  this.storage = new Array(this.SIZE);
}


/**
 * set - Adds given value to the hash table with specified key.
 *
 * - If the provided key has already been used to store another value, simply overwrite
 *   the existing value with the new value.
 * - If the hashed address already contains another key/value pair, you must handle
 *   the collision appropriately.
 *
 * @param {string} key - key to be used to create hashed address
 * @param {string|number|boolean} value - value to be stored in hash table
 * @return {number} The new number of items stored in the hash table
 */

//Pseudo for .set()
//Inputs: 
//A 'key' param that will be hashed to generate index
//A 'value' param that is the value that will be stored at the index generated by hashing the inputted 'key' param
//Output: The number of items stored in the hash table
//Constraints: None
//Edge Cases:
//If 'key' has already been used to store a value in HT, simply overwrite the value stored at that index with the new inputted 'value'
//Must be able to handle collisions

//What approach can I take to implement .set()?
//Invoke hashCode on 'key' param and store the return value in a variable
//This value represents the index of the HT that the value will be stored
//Ask if the element at the index is undefined
//If it is, simply place a node containing the value in it's place
//If it is not, a collision has occurred
//We will need to create a pseudo-linked list where the original node points to the node trying to be added at the same index

HashTable.prototype.set = function(key, value) {
  debugger;

  const hashTable = this.storage;
  const hashedKey = hashCode(key, this.SIZE);

  function Node (value){
    this.value = value;
    this.next = null;
  }
  
  if (hashTable[hashedKey] === undefined){
    hashTable[hashedKey] = new Node(value);
    this.length++;
  } else {
      let current = hashTable[hashedKey];
      console.log(current);
      while (current){
        if (current.next === null){
          current.next = new Node(value);
          current = null;
          this.length++
        } else {
          current = current.next;
        }
      }
    }
    return this.length;
  };

const hashTable = new HashTable;
console.log(hashTable);
hashTable.set('apple', 'fuji');
hashTable.set('berry', 'blueberry');
hashTable.set('berry', 'blackberry');
console.log(hashTable.set('apple', 'golden'));
console.log(hashTable);
/**
* get - Retrieves a value stored in the hash table with a specified key
*
* - If more than one value is stored at the key's hashed address, then you must retrieve
*   the correct value that was originally stored with the provided key
*
* @param {string} key - key to lookup in hash table
* @return {string|number|boolean} The value stored with the specifed key in the
* hash table
*/
HashTable.prototype.get = function(key) {

};

/**
* remove - delete a key/value pair from the hash table
*
* - If the key does not exist in the hash table, return undefined
*
* @param {string} key - key to be found and deleted in hash table
* @return {string|number|boolean} The value deleted from the hash table
*/
HashTable.prototype.remove = function(key) {

};

// Do not modify
function hashCode(string, size) {
  'use strict';
  
  let hash = 0;
  if (string.length === 0) return hash;
  
  for (let i = 0; i < string.length; i++) {
    const letter = string.charCodeAt(i);
    hash = ((hash << 5) - hash) + letter;
    hash = hash & hash; // Convert to 32bit integer
  }
  
  return Math.abs(hash) % size;
}

// Do not remove!!
module.exports = HashTable;
